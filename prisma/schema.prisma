// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String     @unique
  password      String?
  roles         UserRole[]
  bookings      Booking[]
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model UserRole {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Client {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  phone    String
  bookings Booking[]
}

model Booking {
  id              Int           @id @default(autoincrement())
  name            String
  pax             Int
  date            DateTime
  service         String
  client          Client        @relation(fields: [clientId], references: [id])
  clientId        Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  trips           Trip[]
  user            User          @relation(fields: [userId], references: [id])
  userId          String
}

model Location {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  startTrips  Trip[]                 @relation("TripStartLocation")
  endTrips    Trip[]                 @relation("TripEndLocation")
  startPrices VehicleLocationPrice[] @relation("VehiclePriceStartLocation")
  endPrices   VehicleLocationPrice[] @relation("VehiclePriceEndLocation")
}

model Vehicle {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  trips                Trip[]
  VehicleLocationPrice VehicleLocationPrice[]
}

model PaymentMethod {
  id      Int       @id @default(autoincrement())
  type    String    @unique
  Booking Booking[]
}

model Trip {
  id              Int      @id @default(autoincrement())
  booking         Booking  @relation(fields: [bookingId], references: [id])
  bookingId       Int
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId       Int
  service         Service  @relation(fields: [serviceId], references: [id])
  serviceId       Int
  startLocation   Location @relation("TripStartLocation", fields: [startLocationId], references: [id])
  startLocationId Int
  endLocation     Location @relation("TripEndLocation", fields: [endLocationId], references: [id])
  endLocationId   Int
  price           Float
}

model VehicleLocationPrice {
  id              Int      @id @default(autoincrement())
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId       Int
  service         Service  @relation(fields: [serviceId], references: [id])
  serviceId       Int
  startLocation   Location @relation("VehiclePriceStartLocation", fields: [startLocationId], references: [id])
  startLocationId Int
  endLocation     Location @relation("VehiclePriceEndLocation", fields: [endLocationId], references: [id])
  endLocationId   Int
  price           Float
}

model Service {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  Trip                 Trip[]
  VehicleLocationPrice VehicleLocationPrice[]
}
